---

- name: Show warning if we can't find the file vars/main.yml
  debug:
    msg: "Unable to find the file vars/main.yml. Please make sure that you have renamed the file vars/mail.yml.exemple to vars/main.yml"
  when: www_data_folder is not defined
  failed_when: True

- name: "Check if the folder {{ www_data_folder }} exists or not"
  stat:
    path: "{{ www_data_folder }}"
  register: check_www_data_folder

- name: "Force the playbook to fail if we can't find the folder {{ www_data_folder }}"
  debug:
    msg: "Please make sure that the folder {{ www_data_folder }} exist"
  when: check_www_data_folder.stat.exists is defined and check_www_data_folder.stat.exists == False
  failed_when: True
  
- name: "Show the hostname of the remote host"
  debug:
    msg: "Hostname : {{ ansible_hostname }}"

- name: "Show the number of CPU/cores on this server"
  debug:
    msg: "ansible_processor_count : {{ ansible_processor_count }} - ansible_processor_cores : {{ ansible_processor_cores }}"
  changed_when: False

- name: "If we found the number of CPU cores, save it to a new variable"
  set_fact:
    nb_cpu: "{{ ansible_processor_cores }}"
  when: ansible_processor_cores != "NA"

- name: "If not, take the value of CPU Count instead"
  set_fact:
    nb_cpu: "{{ ansible_processor_count }}"
  when: ansible_processor_cores == "NA"

- name: "Determine the number of maximum open files supported by this server"
  shell: "ulimit -n"
  register: nb_max_open_files
  changed_when: False

- name: "Calculate the number of worker_connections"
  shell: "echo \"(({{ nb_cpu }} * {{ nb_max_open_files.stdout }}))\" | bc "
  register: worker_connections_result
  changed_when: False

- name: "Save the number of workers in a nice variable"
  set_fact:
    worker_connections: "{{ worker_connections_result.stdout }}"

- name: "Show the numbers for the workers that we found"
  vars:
    msg: |
      "worker_processes : {{ nb_cpu }}"
      "worker_connections : {{ worker_connections }}"
  debug:
    msg: "{{ msg.split('\n') }}"

- name: "[UBUNTU/DEBIAN] Update apt cache"
  apt:
    update_cache: yes
    cache_valid_time: 86400
  when: ansible_os_family == "Debian"

- name: "[UBUNTU/DEBIAN] Install nginx with APT"
  apt:
    name: "nginx"
  when: ansible_os_family == "Debian"

- name: "[UBUNTU/DEBIAN] Install nginx-extras with APT"
  apt:
    name: "nginx-extras"
  when: ansible_os_family == "Debian"

- name: "[RedHat/CentOS/AmazonLinux] Install nginx with YUM"
  yum:
    name: "{{ packages }}"
  vars:
    packages:
    - nginx
    - nginx-extras
  when: ansible_os_family == "RedHat"

- name: "Try to find the username that will be running the NGINX service"
  shell: "cat /etc/passwd | grep -E \"nginx|www-data|www-admin\" | awk -F ':' '{print $1}' | head -1"
  register: nginx_user_result
  changed_when: False

- name: "Save this nginx user in a nice variable"
  set_fact:
    nginx_user: "{{ nginx_user_result.stdout }}"

- name: "Show the nginx user that we will configure in the template nginx.conf"
  debug:
    msg: "nginx_user : {{ nginx_user }}"

- name: "Create the folders needed for nginx"
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
  with_items:
    - /etc/nginx/streams.d
    - /etc/nginx/sites-enabled
    - /etc/nginx/sites-available

- name: "[UBUNTU/DEBIAN] Remove the default page index.nginx-debian.html"
  file:
   path: "/var/www/html/index.nginx-debian.html"
   state: absent
  when: ansible_os_family == "Debian"

- name: "Create an base /var/www/html folder"
  file:
    path: "/var/www/html"
    state: directory

- name: "Check if the file /var/www/html/empty.html exists or not"
  stat:
    path: "/var/www/html/empty.html"
  register: empty_file

- name: "Create an empty page that will receive the traffic that does not match anything"
  file:
    path: "/var/www/html/empty.html"
    state: touch
  when: empty_file.stat.exists == False

- name: "Make sure that the /etc/ssl/nginx folder exists"
  file:
    name: "/etc/ssl/nginx"
    state: directory

- name: "Push the template file nginx.conf to /etc/nginx/nginx.conf"
  template:
    src: "nginx.conf"
    dest: /etc/nginx/nginx.conf
    backup: yes

- name: "Check if the SystemD service file /lib/systemd/system/nginx.service exists or not"
  stat:
    path: /lib/systemd/system/nginx.service
  register: systemd_service_file

- name: "Check if the InitD service file /etc/init.d/nginx exists or not"
  stat:
    path: /etc/init.d/nginx
  register: initd_service_file

- name: "If both SYSTEMD and INITD services files exists, delete the INIT.D service file /etc/init.d/nginx, to force using the SYSTEMD one"
  file:
    path: /etc/init.d/nginx
    state: absent
  when: systemd_service_file.stat.exists == True and initd_service_file.stat.exists == True

- name: "Reload systemd daemon to make sure we are using the SYSTEMD service file"
  systemd:
    daemon_reload: yes
  when: systemd_service_file.stat.exists == True and initd_service_file.stat.exists == True

- name: "Make sure nginx service is enabled on boot"
  service:
    name: nginx
    enabled: yes

- name: "If present, remove the symlink of the Default Site (/etc/nginx/sites-enabled/default)"
  file:
    path: /etc/nginx/sites-enabled/default 
    state: absent

- name: "List the files in the folder /etc/nginx"
  shell: ls /etc/nginx
  register: nginx_list_files
  changed_when: False

- name: "[Nginx Hardening] If not created already, use openssl to generate the file /etc/nginx/dhparam.pem (might take couple of minutes)"
  shell: openssl dhparam -dsaparam -out /etc/nginx/dhparam.pem 4096
  when: nginx_list_files.stdout.find('dhparam.pem') == -1

- name: "[Nginx Hardening] Declare the dhparam.pem in /etc/nginx/nginx.conf"
  lineinfile:
    path: /etc/nginx/nginx.conf
    line: "    ssl_dhparam /etc/nginx/dhparam.pem;"
    regexp: "ssl_dhparam "
    insertafter: "# SSL Settings"

- name: "Check if the file sites-available/default.conf exists or not"
  stat:
    path: /etc/nginx/sites-available/default.conf
  register: sitesavailable_default

- name: "If not exist already, deploy the default template to sites-available"
  template:
    src: "sites-available/default.conf"
    dest: "/etc/nginx/sites-available/default.conf"
    backup: yes
  when: sitesavailable_default.stat.exists is defined and sitesavailable_default.stat.exists == False

- name: Create the symlink for the default website to sites-enabled
  file:
    src: "/etc/nginx/sites-available/default.conf"
    path: "/etc/nginx/sites-enabled/default.conf"
    state: link

- name: "Test the nginx config before restarting"
  shell: nginx -t
  changed_when: False

- name: "Reload nginx service"
  service:
    name: nginx
    state: reloaded

- name: "Extract the list of listening ports"
  shell: "netstat -ntlp | grep -i 'nginx' | head -20"
  register: netstat
  changed_when: False

- name: "Show the list of listening ports"
  vars:
    msg: "{{ netstat.stdout }}"
  debug:
    msg: "{{ msg.split('\n') }}"